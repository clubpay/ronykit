{{/*
		This is a template block to generate a DTO struct
*/}}
{{ define "dto" }}
	// {{.Name}} is a data transfer object
	{{- range .Comments -}}
		// {{.}}
	{{ end -}}
	{{$extends := strEmptySlice }}
	{{- range .Fields -}}
		{{- if and .IsDTO .Embedded }}{{$extends = strAppend $extends .Name}}{{end}}
	{{- end }}
	{{- if gt (len $extends) 0 }}
		export interface {{.Name}} extends {{strJoin $extends ", "}} {
	{{- else }}
		export interface {{.Name}} {
	{{- end }}
	{{- range .Fields -}}
		{{- if .IsDTO }}
			{{- if .Embedded }} {{continue}} {{end}}
			{{index (strSplit (.GetTag "json") ",") 0}}{{ if .IsPtr}}?{{end}}: {{tsType .RType}}
		{{- else }}
			{{index (strSplit (.GetTag "json") ",") 0}}{{ if .IsPtr}}?{{end}}: {{tsType .RType}}
		{{- end }}
	{{- end }}
	}
{{- end }}

{{/* Generate the DTO interfaces */}}
// Code generated by RonyKIT Stub Generator (TypeScript); DO NOT EDIT.
{{ range $dtoName, $dto := .DTOs -}}
	{{ template "dto" $dto }}
{{- end }}


{{/* Generate the Stub Class */}}
{{$serviceName := .Name}}
class {{$serviceName}}Stub {
readonly serverURL: string ;

constructor(serverURL: string) {
	this.serverURL = serverURL.replace(/\/$/, '');
}

{{/*
			Generating the REST methods
*/}}
{{- range .RESTs -}}
	{{$methodName := .Name}}
	{{- if ne $methodName "" }}
		// @ts-ignore
		async {{lowerCamelCase $methodName}}(req: {{.Request.Name}}, headers?: HeadersInit): Promise<{{.Response.Name}}> {
		{{- if eq (toLower .Method) "get" }}
			const keys = Object.keys(req);
			const keyValuePairs = keys.map(key => {
			return encodeURIComponent(key) + '=' + encodeURIComponent(req[key]);
			}).join('&');
			const queryParams =  (keyValuePairs.length > 0) ? `${keyValuePairs}`: ""
			const url = `${this.serverURL}{{tsReplacePathParams .Path "req."}}${queryParams}`;
			return fetch(url, {
				method: "{{.Method}}",
				headers: {
					"Content-Type": "application/json",
					...headers,
				}
			}).then((res: Response) => {
				if (res.status !== 200) {
					throw new Error("Failed to fetch the data");
				}

				return res.json()
			})
		{{- else }}
			return fetch(this.serverURL + `{{tsReplacePathParams .Path "req."}}`, {
				method: "{{.Method}}",
				headers: {
					"Content-Type": "application/json",
					...headers,
				},
				body: JSON.stringify(req)
			}).then((res: Response) => {
				if (res.status !== 200) {
					throw new Error("Failed to fetch the data");
				}

				return res.json()
			})
		{{- end }}
		}
	{{- end }}
{{- end }}

} // end of {{$serviceName}}Stub
