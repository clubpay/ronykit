{{/*
		This is a template block to generate a DTO struct
*/}}

{{ define "dto" }}
	// {{.Name}} is a data transfer object
	type {{.Name}} struct {
	{{- range .ExportedFields -}}
		{{- if .Embedded }}
			{{.GoName}}
		{{- else }}
			{{.GoName}} {{goType .Element.RType}} {{ if gt (len .Tag.Name) 0 }}`{{.Tag.Name}}:"{{.Tag.Value}} {{- if .Tag.OmitEmpty -}},omitempty{{- end -}}" {{ if gt (len (.Tag.Get "swag")) 0}} swag:"{{.Tag.Get "swag"}}"{{end}}`{{- end }}
		{{- end }}
	{{- end }}
	}
	{{ if .ImplementError }}
		{{- if ne .CodeField ""}}
			func (x {{.Name}}) GetCode() int {
			return x.{{.CodeField}}
			}
		{{- end }}
		{{ if ne .ItemField ""}}
			func (x {{.Name}}) GetItem() string {
			return x.{{.ItemField}}
			}
		{{- end }}
	{{- end }}
{{ end }}


{{/*
			Start of the file
*/}}
// Code generated by RonyKIT Stub Generator (Golang); DO NOT EDIT.

package {{.Pkg}}

import (
"context"
"fmt"
{{ range .GetBuiltinPkgPaths -}}
	"{{ . }}"
{{ end }}

"github.com/clubpay/ronykit/kit"
"github.com/clubpay/ronykit/kit/utils"
"github.com/clubpay/ronykit/stub"
"github.com/clubpay/ronykit/kit/utils/reflector"
)

{{/* We use this to make sure fmt import is not complained by the compiler */}}
var (
_ fmt.Stringer
_ utils.Result
{{ if containsStr .GetBuiltinPkgPaths "encoding/json" }} _ json.RawMessage {{end}}
{{ if containsStr .GetBuiltinPkgPaths "time" }} _ time.Time {{end}}
)

{{/* Generate the init function */}}
{{$tags := strQuote .Tags}}
func init() {
{{- range $dtoName, $dto := .Messages }}
	reflector.Register(&{{$dtoName}}{}, {{strJoin $tags ","}})
{{- end }}
}

{{/*
			Generating the DTO structs with the help of the defined template block at the
			beginning of the template file.
*/}}
{{ range $dtoName, $dto := .Messages }}
	{{ template "dto" $dto }}
{{ end }}

{{/*
			Generating the Service Stub
*/}}
{{$serviceName := .Name}}
type I{{$serviceName}}Stub interface {
{{ range .RESTMethods }}
	{{$methodName := .Name}}
{{ if ne $methodName "" -}}
		{{$methodName}}(
		ctx context.Context, req {{if not .Request.Message.IsSpecial }}*{{end}}{{.Request.Message.GoName}}, opt ...stub.RESTOption,
		) ({{if not .GetOKResponse.Message.IsSpecial }}*{{end}}{{.GetOKResponse.Message.GoName}}, error)
{{ end -}}
{{- end }}
}

// {{$serviceName}}Stub represents the client/stub for {{$serviceName}}.
// Implements I{{$serviceName}}Stub
type {{$serviceName}}Stub struct {
hostPort string
secure bool
verifyTLS bool

s *stub.Stub
}

func New{{$serviceName}}Stub(hostPort string, opts ...stub.Option) *{{$serviceName}}Stub {
s := &{{$serviceName}}Stub{
s: stub.New(hostPort, opts...),
}

return s
}

var _ I{{$serviceName}}Stub = (*{{$serviceName}}Stub)(nil)

{{/*
			Generating the REST methods
*/}}
{{ range .RESTMethods }}
	{{$methodName := .Name}}
	{{- if ne $methodName "" }}
		func (s {{$serviceName}}Stub) {{$methodName}}(
		ctx context.Context, req {{if not .Request.Message.IsSpecial }}*{{end}}{{.Request.Message.GoName}}, opt ...stub.RESTOption,
		) ({{if not .GetOKResponse.Message.IsSpecial }}*{{end}}{{.GetOKResponse.Message.GoName}}, error){
		{{ if .GetOKResponse.Message.IsSpecial }}
			res := {{.GetOKResponse.Message.GoName }}{}
		{{ else }}
			res := &{{.GetOKResponse.Message.Name}}{}
		{{end}}
		httpCtx := s.s.REST(opt...).
		SetMethod("{{.Method}}").
		{{ range $idx, $errDto := .GetErrors }}
			SetResponseHandler(
			{{ $errDto.ErrCode }},
			func(ctx context.Context, r stub.RESTResponse) *stub.Error {
			res := &{{$errDto.Message.Name}}{}
			err := stub.WrapError(kit.UnmarshalMessage(r.GetBody(), res))
			if err != nil {
			return err
			}

			return stub.NewErrorWithMsg(res)
			},
			).
		{{- end }}
		SetOKHandler(
		func(ctx context.Context, r stub.RESTResponse) *stub.Error {
		{{ if .GetOKResponse.Message.IsSpecial }}
			res = utils.CloneBytes(r.GetBody())
			return  nil
		{{ else }}
			return stub.WrapError(kit.UnmarshalMessage(r.GetBody(), res))
		{{end}}

		},
		).
			{{ if .HasDefaultResponse }}
		DefaultResponseHandler(
		func(ctx context.Context, r stub.RESTResponse) *stub.Error {
			{{ $errDto := .GetDefaultResponse }}
			res := &{{$errDto.Message.Name}}{}
			err := stub.WrapError(kit.UnmarshalMessage(r.GetBody(), res))
			if err != nil {
			return err
			}

			return stub.NewErrorWithMsg(res)
		},
		).
			{{ else }}
		DefaultResponseHandler(
		func(ctx context.Context, r stub.RESTResponse) *stub.Error {
		return stub.NewError(r.StatusCode(), string(r.GetBody()))
		},
		).
			{{end}}
		AutoRun(ctx, "{{.Path}}", kit.CustomEncoding("{{.Encoding}}"), req)
		defer httpCtx.Release()

		if err := httpCtx.Err(); err != nil {
		return nil, err
		}

		return res, nil
		}
	{{ end }}
{{- end }}


{{/*	Generating the mock methods */}}

type MockOption func(*{{$serviceName}}StubMock)

{{ range .RESTMethods }}
	{{$methodName := .Name}}
	{{- if ne $methodName "" }}
		func Mock{{$methodName}}(
		f func(
		ctx context.Context,
		req {{if not .Request.Message.IsSpecial }}*{{end}}{{.Request.Message.GoName}},
		opt ...stub.RESTOption,
		) ({{if not .GetOKResponse.Message.IsSpecial }}*{{end}}{{.GetOKResponse.Message.GoName}}, error),
		) MockOption {
		return func(sm *{{$serviceName}}StubMock) {
		sm.{{toLower $methodName}} = f
		}
		}
	{{ end }}
{{- end }}


// {{$serviceName}}StubMock represents the mocked for client/stub for {{$serviceName}}.
// Implements I{{$serviceName}}Stub
type {{$serviceName}}StubMock struct {
{{ range .RESTMethods }}
	{{$methodName := .Name}}
	{{- if ne $methodName "" -}}
		{{toLower $methodName}} func(
		ctx context.Context,
		req {{if not .Request.Message.IsSpecial }}*{{end}}{{.Request.Message.GoName}},
		opt ...stub.RESTOption,
		) ({{if not .GetOKResponse.Message.IsSpecial }}*{{end}}{{.GetOKResponse.Message.GoName}}, error)
	{{- end -}}
{{- end }}
}

func New{{$serviceName}}StubMock(opts ...MockOption) *{{$serviceName}}StubMock {
s := &{{$serviceName}}StubMock{}
for _, o := range opts {
o(s)
}

return s
}

var _ I{{$serviceName}}Stub = (*{{$serviceName}}StubMock)(nil)

{{ range .RESTMethods }}
	{{$methodName := .Name}}
	{{- if ne $methodName "" }}
		func (s *{{$serviceName}}StubMock) {{$methodName}}(
		ctx context.Context,
		req {{if not .Request.Message.IsSpecial }}*{{end}}{{.Request.Message.GoName}},
		opt ...stub.RESTOption,
		) ({{if not .GetOKResponse.Message.IsSpecial }}*{{end}}{{.GetOKResponse.Message.GoName}}, error){
		if s.{{toLower $methodName}} == nil {
		return nil, stub.WrapError(fmt.Errorf("method not mocked"))
		}

		return s.{{toLower $methodName}}(ctx, req, opt...)
		}

		func (s *{{$serviceName}}StubMock) Set{{$methodName}}(
		f func(
		ctx context.Context,
		req {{if not .Request.Message.IsSpecial }}*{{end}}{{.Request.Message.GoName}},
		opt ...stub.RESTOption,
		) ({{if not .GetOKResponse.Message.IsSpecial }}*{{end}}{{.GetOKResponse.Message.GoName}}, error),
		) *{{$serviceName}}StubMock {
		s.{{toLower $methodName}} = f

		return s
		}
	{{ end }}
{{- end }}
