//go:build ignore

package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"
)

/*
   Creation Time: 2019 - Nov - 30
   Created by:  (ehsan)
   Maintainers:
      1.  Ehsan N. Moosa (E2)
   Auditor: Ehsan N. Moosa (E2)
   Copyright Ronak Software Group 2022
*/

func main() {
	var semVer, gitVer string
	// We use describe method to get the latest tag, which is the latest semantic version.
	b, err := exec.Command("git", "describe", "--tags", "--abbrev=0").Output()
	if err != nil {
		fmt.Println("error in git describe:", err)
		if e, ok := err.(*exec.ExitError); ok {
			fmt.Println(string(e.Stderr))
		}
	}
	semVer = strings.Trim(strings.TrimSpace(string(b)), "\"")

	// We use git log command to get the commit hash of the latest commit
	b, err = exec.Command("git", "log", "--format=\"%H\"", "-n", "1").Output()
	if err != nil {
		fmt.Println("error in git log:", err)
		if e, ok := err.(*exec.ExitError); ok {
			fmt.Println(string(e.Stderr))
		}
		semVer = "v0.0.0"
	}
	gitVer = strings.Trim(strings.TrimSpace(string(b)), "\"")

	f, err := os.Create("version.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp       time.Time
		GitVersion      string
		SemanticVersion string
	}{
		Timestamp:       time.Now(),
		GitVersion:      gitVer,
		SemanticVersion: strings.TrimLeft(semVer, "v"),
	})
}

var packageTemplate = template.Must(template.New("").Parse(`
// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// Generated At: {{ .Timestamp }}


package boxship

import "github.com/blang/semver/v4"

var Version = semver.MustParse("{{ .SemanticVersion }}")

`))
