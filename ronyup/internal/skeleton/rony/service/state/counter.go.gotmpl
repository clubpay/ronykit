package state

import (
    "fmt"

    "github.com/clubpay/ronykit/rony"
)

var _ rony.State[Action] = (*Counter)(nil)

type Counter struct {
    Count int
    Level int
}

func (e *Counter) Name() string {
    return "Counter"
}

func (e *Counter) Reduce(action Action) error {
    switch action.Type() {
    case "reset":
        e.Count = 0
    case "up":
        e.Count += action.Payload()
    case "down":
        if e.Count <= action.Payload() {
            return fmt.Errorf("count cannot be negative")
        }

        e.Count -= action.Payload()
    }
    e.Level += 1

    return nil
}

type Action interface {
    Type() string
    Payload() int
}

type Count struct {
    Action string
    Count  int
}

func (c Count) Type() string {
    return c.Action
}

func (c Count) Payload() int {
    return c.Count
}

type Reset struct{}

func (Reset) Type() string {
    return "reset"
}

func (Reset) Payload() int { return 0 }
